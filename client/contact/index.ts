/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ContactPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The message property
     */
    message?: string;
}
export interface ContactPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The message property
     */
    message?: string;
}
/**
 * Builds and executes requests for operations under /contact
 */
export interface ContactRequestBuilder extends BaseRequestBuilder<ContactRequestBuilder> {
    /**
     * お問い合わせAPI
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ContactPostResponse
     */
     post(body: ContactPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ContactPostResponse | undefined>;
    /**
     * お問い合わせAPI
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: ContactPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a contactPostRequestBody
 */
export function createContactPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContactPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a contactPostResponse
 */
export function createContactPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoContactPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContactPostRequestBody(contactPostRequestBody: Partial<ContactPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { contactPostRequestBody.message = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoContactPostResponse(contactPostResponse: Partial<ContactPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { contactPostResponse.message = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContactPostRequestBody(writer: SerializationWriter, contactPostRequestBody: Partial<ContactPostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("message", contactPostRequestBody.message);
    writer.writeAdditionalData(contactPostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeContactPostResponse(writer: SerializationWriter, contactPostResponse: Partial<ContactPostResponse> | undefined = {}) : void {
    writer.writeStringValue("message", contactPostResponse.message);
    writer.writeAdditionalData(contactPostResponse.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const ContactRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createContactPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeContactPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ContactRequestBuilderUriTemplate = "{+baseurl}/api/contact";
/* tslint:enable */
/* eslint-enable */
